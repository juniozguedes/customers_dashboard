class Pessoa:
	def __init__(self):
		self.nome = None
		self.tags = None
		self.remids = None


for tag, remid in itertools.izip_longest(anunciante.tags, anunciante.re
    ...: mid):
    ...:     print(tag)  
    ...:     print(remid)


>>> 
>>> anunciante = Pessoa()
>>> anunciante.nome = 'Jose'
>>> anunciante.nome
'Jose'
>>> anunciante.tags = ['primeira tag','segunda tag']
>>> anunciante.remid = ['111111111111111','222222222222']
>>> import itertools
>>> from itertools import izip_longest
>>> for tag, remid in itertools.izip_longest(anunciante.tags, anunciante.remid):        
...     print(tag)      
...     print(remid)
... 
primeira tag
111111111111111
segunda tag
222222222222

Now, backing-up a PostgreSQL database from a bash shell is pretty easy. Just invoke pg_dump like this:

pg_dump -h localhost -U postgres my_database
You’ll also want to compress your backup. You can easily save a lot of disk space by gzipping your dump file:

pg_dump -h localhost -U postgres my_database | gzip > backup.gz


===

Sugest:

Formatação Ficha de cadastro


VueJS

====

Same as above but for a non existing username gives None:

>>> missing = User.query.filter_by(username='missing').first()
>>> missing is None
True

Selecting a bunch of users by a more complex expression:

>>> User.query.filter(User.email.endswith('@example.com')).all()
[<User u'admin'>, <User u'guest'>]

Ordering users by something:

>>> User.query.order_by(User.username).all()
[<User u'admin'>, <User u'guest'>, <User u'peter'>]

Limiting users:

>>> User.query.limit(1).all()
[<User u'admin'>]

====

not equals:

query.filter(User.name != 'leela')

LIKE:

query.filter(User.name.like('%leela%'))

IN:

query.filter(User.name.in_(['leela', 'akshay', 'santanu']))

# works with query objects too:

query.filter(User.name.in_(session.query(User.name).filter(User.name.like('%santanu%'))))

NOT IN:

query.filter(~User.name.in_(['lee', 'sonal', 'akshay']))

IS NULL:

filter(User.name == None)

IS NOT NULL:

filter(User.name != None)

AND:

from sqlalchemy import and_
filter(and_(User.name == 'leela', User.fullname == 'leela dharan'))

#or, default without and_ method comma separated list of conditions are AND

filter(User.name == 'leela', User.fullname == 'leela dharan')

# or call filter()/filter_by() multiple times

filter(User.name == 'leela').filter(User.fullname == 'leela dharan')

OR:

from sqlalchemy import or_
filter(or_(User.name == 'leela', User.name == 'akshay'))

match:

query.filter(User.name.match('leela'))
